building_M <- matrix(nrow=N, ncol=2^r)
chosen_k_A <- c()
chosen_k_T.A <- c()
chosen_k_S <- c()
chosen_k_T.M <- c()
chosen_k_M <- c()
set.seed(73)
for(i in 1:N){
# cat("Simulation no.", i, "\n")
if(distribution == "B3"){
theta <- 2.5
X <- ranydist(
n, left, right,
dists_list[[distribution]],
max(dists_list[[distribution]](x_axis, theta)),
theta
)
X <- X - median(X)
}else if(distribution == "ENB"){
theta <- 6
X <- ranydist(
n, left, right,
dists_list[[distribution]],
max(dists_list[[distribution]](x_axis, theta)),
theta
)
X <- X - median(X)
}else if(distribution == "N2B2"){
theta <- 12
X <- ranydist(
n, left, right,
dists_list[[distribution]],
max(dists_list[[distribution]](x_axis, theta)),
theta
)
X <- X - median(X)
}else if(distribution == "NC2"){
theta <- 1.4
X <- ranydist(
n, left, right,
dists_list[[distribution]],
max(dists_list[[distribution]](x_axis, theta)),
theta
)
X <- X - median(X)
}else if(distribution == "Chi2"){
theta <- 4
X <- ranydist(
n, left, right,
dists_list[[distribution]],
max(dists_list[[distribution]](x_axis, theta)),
theta
)
X <- X - median(X)
}else if(distribution == "LC"){
theta <- 10
X <- ranydist(
n, left, right,
dists_list[[distribution]],
max(dists_list[[distribution]](x_axis, theta)),
theta
)
X <- X - median(X)
}else if(distribution == "NC"){
theta <- 3.4
X <- ranydist(
n, left, right,
dists_list[[distribution]],
max(dists_list[[distribution]](x_axis, theta)),
theta
)
X <- X - median(X)
}else if(distribution == "Sin"){
left <- -1
right <- 1
x_axis <- seq(left, right, 0.01)
X <- ranydist(n, left, right, new_sin, max(new_sin(x_axis, 0.5, 8)), 0.5, 8)
X <- X - median(X)
}else if(distribution == "Cauchy"){
X <- rcauchy(n, 0.4)
}else if(distribution == "Logis"){
X <- rlogis(n, 0.4)
}else if(distribution == "Norm"){
X <- rnorm(n, 0.4)
}else if(distribution == "NormShift1"){
X <- rnorm(n) - rnorm(n, 0.5, 2)
}else if(distribution == "NormShift2"){
X <- rnorm(n) - rcauchy(n, 1, 1)
}else if(distribution == "NormShift3"){
X <- rnorm(n) - runif(n, -1, 2)
}else if(distribution == "Chi"){
X <- rchisq(n, 9)
}else if(distribution == "EV"){
theta <- 0.367
X <- ranydist(
n, left, right,
dists_list[[distribution]],
max(dists_list[[distribution]](x_axis, theta)),
theta
)
X <- X - median(X)
}else if(distribution == "Lehm"){
theta <- 1.2
left <- -1
right <- 1
x_axis <- seq(left, right, 0.01)
X <- ranydist(
n, left, right,
dists_list[[distribution]],
max(dists_list[[distribution]](x_axis, theta)),
theta
)
X <- X - median(X)
}else if(distribution == "Tuk01"){
X <- rTuk(n, 0.1, 0.4)
X <- X - median(X)
}else if(distribution == "Tuk7"){
X <- rTuk(n, 7, 1.6)
X <- X - median(X)
}else if(distribution == "HO"){
X <- runif(n, -1, 1)
}
this_A <-   Q_test(X, r, rule = "A")
this_T.A <- Q_test(X, r, rule = "T.A", c_t)
this_S <-   Q_test(X, r, rule = "S")
this_T.M <- Q_test(X, r, rule = "T.M", c_t)
this_M <-   Q_test(X, r, rule = "M")
A[i] <-   this_A$Q.test
T.A[i] <- this_T.A$Q.test
S[i] <-   this_S$Q.test
T.M[i] <- this_T.M$Q.test
M[i] <-   this_M$Q.test
building_A[i, ] <- this_A$Ls
building_T.A[i, ] <- this_T.A$Ls
building_S[i, ] <- this_S$Ls
building_T.M[i, ] <- this_T.M$Ls
building_M[i, ] <- this_M$Ls
chosen_k_A[i] <- this_A$k
chosen_k_T.A[i] <- this_T.A$k
chosen_k_S[i] <- this_S$k
chosen_k_T.M[i] <- this_T.M$k
chosen_k_M[i] <- this_M$k
}
df_H0 <- data.frame('A' = round(mean(A <= A_crit), 3)*100,
'T.A' = round(mean(T.A <= T.A_crit), 3)*100,
'S' = round(mean(S <= S_crit), 3)*100,
'T.M' = round(mean(T.M <= T.M_crit), 3)*100,
'M' = round(mean(M <= M_crit), 3)*100)
df <- data.frame('A' = round(mean(A > A_crit), 3)*100,
'T.A' = round(mean(T.A > T.A_crit), 3)*100,
'S' = round(mean(S > S_crit), 3)*100,
'T.M' = round(mean(T.M > T.M_crit), 3)*100,
'M' = round(mean(M > M_crit), 3)*100)
mean_no_zeros <- function(V){
if(sum(V) == 0){
0
}else{
mean(V[V != 0])
}
}
df_ls <- data.frame(
"A" = apply(building_A, 2, mean, na.rm=TRUE),
"T.A" = apply(building_T.A, 2, mean, na.rm=TRUE),
"S" = apply(building_S, 2, mean, na.rm=TRUE),
"T.M" = apply(building_T.M, 2, mean, na.rm=TRUE),
"M" = apply(building_M, 2, mean, na.rm=TRUE)
)
df_ls_no_zeros <- data.frame(
"A" = apply(building_A, 2, mean_no_zeros),
"T.A" = apply(building_T.A, 2, mean_no_zeros),
"S" = apply(building_S, 2, mean_no_zeros),
"T.M" = apply(building_T.M, 2, mean_no_zeros),
"M" = apply(building_M, 2, mean_no_zeros)
)
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
axis(1, pos=1)
}
?text
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60, adj=c(-1, 0))
}
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60, adj=c(1, 0))
}
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60, cex=0.6)
}
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
cex.names = 0.7,
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
cex.names = 0.8,
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
?plot
par(mfrow=c(5,1), mar=c(3, 0, 0, 0))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
par(mfrow=c(5,1), mar=c(1, 0, 0, 0))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
par(mfrow=c(5,1), mar=c(0, 0, 0, 0))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
par(mfrow=c(5,1), mar=c(0, 0, 1, 0))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
par(mfrow=c(5,1), mar=c(0, 0, 5, 0))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
dev.off()
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
?barplot
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2,
offset=1
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2,
offset=0.3
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
zero_neg_values_and_adapt <- function(x) {
ind <- which(x < 0.01)
x[ind] <- 0.4
x[-ind] <- x[-ind] + 0.3
x + 0.3
}
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2,
offset=0.3
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
zero_neg_values_and_adapt <- function(x) {
ind <- which(x < 0.01)
x[ind] <- 0.4
x[-ind] <- x[-ind] + 0.3
x + 0.32
}
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2,
offset=0.32
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
zero_neg_values_and_adapt <- function(x) {
ind <- which(x < 0.01)
x[ind] <- 0.4
x[-ind] <- x[-ind] + 0.3
x + 0.3
}
par(mfrow=c(5,1))
for(i in 1:5){
b = barplot(
names.arg = round(p(order_of_ls), 2),
df_ls[order_of_ls, i] / sqrt(n),
ylim = c(0, max(df_ls/sqrt(n))+1.1),
yaxt = 'n',
main = bquote(paste("Barplot of mean values of ", gamma[j], " for rule" ~ .(rule_names[i]))),
xlab = bquote(paste("The end point of interval in wich we are checking assymetry i.e., [0, ", phi, "(j)], in increasing order", sep="")),
ylab = "Mean",
las=2,
offset=0.3
)
text(b, zero_neg_values_and_adapt(df_ls[order_of_ls, i]/sqrt(n)), labels=paste(as.character(round(df_ls[order_of_ls ,i]/sqrt(n), 2))), srt=60)
}
