l <- function(u, j){
pj <- p(j)
1/sqrt(2*pj) * (1-pj < u & u < 1) - 1/sqrt(2*pj) * (0 < u & u < pj)
}
L <- function(j, X){
n <- length(X)
inputs <- (rank(c(X, -X)) - 0.5)[1:n] / 2 / n
cat(inputs, "\n")
final <- sapply(inputs, l, j)
cat(final, "\n")
sum(final)/sqrt(n)
}
Q <- function(X, k){
sum(sapply(1:k, L, X)^2)
}
Q(-3:3, 2)
p <- function(j){
if(any(j < 0)){
0
}else{
(j == 1)/2 + (j > 1) * (2*j - 2 ^ ceiling(log2(j)) - 1) / (2 ^ (1+ceiling(log2(j))))
}
}
l <- function(u, j){
pj <- p(j)
1/sqrt(2*pj) * (1-pj < u & u < 1) - 1/sqrt(2*pj) * (0 < u & u < pj)
}
L <- function(j, X){
n <- length(X)
inputs <- (rank(c(X, -X)) - 0.5)[1:n] / 2 / n
final <- sapply(inputs, l, j)
sum(final)/sqrt(n)
}
Q <- function(X, k){
sum(sapply(1:k, L, X)^2)
}
Q(-3:3, 2)
p <- function(j){
if(any(j < 0)){
0
}else{
(j == 1)/2 + (j > 1) * (2*j - 2 ^ ceiling(log2(j)) - 1) / (2 ^ (1+ceiling(log2(j))))
}
}
l <- function(u, j){
pj <- p(j)
1/sqrt(2*pj) * (1-pj < u & u < 1) - 1/sqrt(2*pj) * (0 < u & u < pj)
}
L <- function(j, X){
n <- length(X)
inputs <- (rank(c(X, -X)) - 0.5)[1:n] / 2 / n
final <- sapply(inputs, l, j)
sum(final)/sqrt(n)
}
Q <- function(X, k){
sum(sapply(1:k, L, X)^2)
}
Q(-3:4, 2)
p <- function(j){
if(any(j < 0)){
0
}else{
(j == 1)/2 + (j > 1) * (2*j - 2 ^ ceiling(log2(j)) - 1) / (2 ^ (1+ceiling(log2(j))))
}
}
l <- function(u, j){
pj <- p(j)
1/sqrt(2*pj) * (1-pj < u & u < 1) - 1/sqrt(2*pj) * (0 < u & u < pj)
}
L <- function(j, X){
n <- length(X)
inputs <- (rank(c(X, -X)) - 0.5)[1:n] / 2 / n
final <- sapply(inputs, l, j)
sum(final)/sqrt(n)
}
Q <- function(X, k){
sum(sapply(1:k, L, X)^2)
}
Q(-3:9, 2)
p <- function(j){
if(any(j < 0)){
0
}else{
(j == 1)/2 + (j > 1) * (2*j - 2 ^ ceiling(log2(j)) - 1) / (2 ^ (1+ceiling(log2(j))))
}
}
l <- function(u, j){
pj <- p(j)
1/sqrt(2*pj) * (1-pj < u & u < 1) - 1/sqrt(2*pj) * (0 < u & u < pj)
}
L <- function(j, X){
n <- length(X)
inputs <- (rank(c(X, -X)) - 0.5)[1:n] / 2 / n
final <- sapply(inputs, l, j)
sum(final)/sqrt(n)
}
Q <- function(X, k){
sum(sapply(1:k, L, X)^2)
}
Q(rnorm(50), 16)
p <- function(j){
if(any(j < 0)){
0
}else{
(j == 1)/2 + (j > 1) * (2*j - 2 ^ ceiling(log2(j)) - 1) / (2 ^ (1+ceiling(log2(j))))
}
}
l <- function(u, j){
pj <- p(j)
1/sqrt(2*pj) * (1-pj < u & u < 1) - 1/sqrt(2*pj) * (0 < u & u < pj)
}
L <- function(j, X){
n <- length(X)
inputs <- (rank(c(X, -X)) - 0.5)[1:n] / 2 / n
final <- sapply(inputs, l, j)
sum(final)/sqrt(n)
}
Q <- function(X, k){
sum(sapply(1:k, L, X)^2)
}
Q(rnorm(50), 16)
p <- function(j){
if(any(j < 0)){
0
}else{
(j == 1)/2 + (j > 1) * (2*j - 2 ^ ceiling(log2(j)) - 1) / (2 ^ (1+ceiling(log2(j))))
}
}
l <- function(u, j){
pj <- p(j)
1/sqrt(2*pj) * (1-pj < u & u < 1) - 1/sqrt(2*pj) * (0 < u & u < pj)
}
L <- function(j, X){
n <- length(X)
inputs <- (rank(c(X, -X)) - 0.5)[1:n] / 2 / n
final <- sapply(inputs, l, j)
sum(final)/sqrt(n)
}
Q <- function(X, k){
sum(sapply(1:k, L, X)^2)
}
Q(rnorm(50), 16)
p <- function(j){
if(any(j < 0)){
0
}else{
(j == 1)/2 + (j > 1) * (2*j - 2 ^ ceiling(log2(j)) - 1) / (2 ^ (1+ceiling(log2(j))))
}
}
l <- function(u, j){
pj <- p(j)
1/sqrt(2*pj) * (1-pj < u & u < 1) - 1/sqrt(2*pj) * (0 < u & u < pj)
}
L <- function(j, X){
n <- length(X)
inputs <- (rank(c(X, -X)) - 0.5)[1:n] / 2 / n
final <- sapply(inputs, l, j)
sum(final)/sqrt(n)
}
Q <- function(X, k){
sum(sapply(1:k, L, X)^2)
}
Q(rnorm(50), 16)
p <- function(j){
if(any(j < 0)){
0
}else{
(j == 1)/2 + (j > 1) * (2*j - 2 ^ ceiling(log2(j)) - 1) / (2 ^ (1+ceiling(log2(j))))
}
}
l <- function(u, j){
pj <- p(j)
1/sqrt(2*pj) * (1-pj < u & u < 1) - 1/sqrt(2*pj) * (0 < u & u < pj)
}
L <- function(j, X){
n <- length(X)
inputs <- (rank(c(X, -X)) - 0.5)[1:n] / 2 / n
final <- sapply(inputs, l, j)
sum(final)/sqrt(n)
}
Q <- function(X, k){
sum(sapply(1:k, L, X)^2)
}
Q(rnorm(50), 16)
p <- function(j){
if(any(j < 0)){
0
}else{
(j == 1)/2 + (j > 1) * (2*j - 2 ^ ceiling(log2(j)) - 1) / (2 ^ (1+ceiling(log2(j))))
}
}
l <- function(u, j){
pj <- p(j)
1/sqrt(2*pj) * (1-pj < u & u < 1) - 1/sqrt(2*pj) * (0 < u & u < pj)
}
L <- function(j, X){
n <- length(X)
inputs <- (rank(c(X, -X)) - 0.5)[1:n] / 2 / n
final <- sapply(inputs, l, j)
sum(final)/sqrt(n)
}
Q <- function(X, k){
sum(sapply(1:k, L, X)^2)
}
Q(rnorm(50), 16)
p <- function(j){
if(any(j < 0)){
0
}else{
(j == 1)/2 + (j > 1) * (2*j - 2 ^ ceiling(log2(j)) - 1) / (2 ^ (1+ceiling(log2(j))))
}
}
l <- function(u, j){
pj <- p(j)
1/sqrt(2*pj) * (1-pj < u & u < 1) - 1/sqrt(2*pj) * (0 < u & u < pj)
}
L <- function(j, X){
n <- length(X)
inputs <- (rank(c(X, -X)) - 0.5)[1:n] / 2 / n
final <- sapply(inputs, l, j)
sum(final)/sqrt(n)
}
Q <- function(X, k){
sum(sapply(1:k, L, X)^2)
}
Q(rnorm(50), 16)
p <- function(j){
if(any(j < 0)){
0
}else{
(j == 1)/2 + (j > 1) * (2*j - 2 ^ ceiling(log2(j)) - 1) / (2 ^ (1+ceiling(log2(j))))
}
}
l <- function(u, j){
pj <- p(j)
1/sqrt(2*pj) * (1-pj < u & u < 1) - 1/sqrt(2*pj) * (0 < u & u < pj)
}
L <- function(j, X){
n <- length(X)
inputs <- (rank(c(X, -X)) - 0.5)[1:n] / 2 / n
final <- sapply(inputs, l, j)
sum(final)/sqrt(n)
}
Q <- function(X, k){
sum(sapply(1:k, L, X)^2)
}
Q(rnorm(50), 16)
p <- function(j){
if(any(j < 0)){
0
}else{
(j == 1)/2 + (j > 1) * (2*j - 2 ^ ceiling(log2(j)) - 1) / (2 ^ (1+ceiling(log2(j))))
}
}
l <- function(u, j){
pj <- p(j)
1/sqrt(2*pj) * (1-pj < u & u < 1) - 1/sqrt(2*pj) * (0 < u & u < pj)
}
L <- function(j, X){
n <- length(X)
inputs <- (rank(c(X, -X)) - 0.5)[1:n] / 2 / n
final <- sapply(inputs, l, j)
sum(final)/sqrt(n)
}
Q <- function(X, k){
sum(sapply(1:k, L, X)^2)
}
Q(rnorm(50), 16)
p <- function(j){
if(any(j < 0)){
0
}else{
(j == 1)/2 + (j > 1) * (2*j - 2 ^ ceiling(log2(j)) - 1) / (2 ^ (1+ceiling(log2(j))))
}
}
l <- function(u, j){
pj <- p(j)
1/sqrt(2*pj) * (1-pj < u & u < 1) - 1/sqrt(2*pj) * (0 < u & u < pj)
}
L <- function(j, X){
n <- length(X)
inputs <- (rank(c(X, -X)) - 0.5)[1:n] / 2 / n
final <- sapply(inputs, l, j)
sum(final)/sqrt(n)
}
Q <- function(X, k){
sum(sapply(1:k, L, X)^2)
}
Q(rnorm(50), 16)
p <- function(j){
if(any(j < 0)){
0
}else{
(j == 1)/2 + (j > 1) * (2*j - 2 ^ ceiling(log2(j)) - 1) / (2 ^ (1+ceiling(log2(j))))
}
}
l <- function(u, j){
pj <- p(j)
1/sqrt(2*pj) * (1-pj < u & u < 1) - 1/sqrt(2*pj) * (0 < u & u < pj)
}
L <- function(j, X){
n <- length(X)
inputs <- (rank(c(X, -X)) - 0.5)[1:n] / 2 / n
final <- sapply(inputs, l, j)
sum(final)/sqrt(n)
}
Q <- function(X, k){
sum(sapply(1:k, L, X)^2)
}
Q(rnorm(50), 16)
source("basic_functions.R")
source("basic_functions.R")
Ls <- matrix(nrow=10000, ncol=32)
for(i in 1:10000){
X <- rnorm(50)
Ls[i, ] <- sapply(1:32, L, X)
}
Ls
source("basic_functions.R")
set.seed(42)
Ls <- matrix(nrow=10000, ncol=32)
for(i in 1:10000){
cat('Randomizing...\t', i, '\n')
X <- rnorm(50)
Ls[i, ] <- sapply(1:32, L, X)
}
Lqs <- matrix(nrow=10000, ncol=6)
for(i in 1:10000){
cat('Crunching quantiles...\t', i, '\n')
Lqs[i,] <- quantile(L[i,], c(0.01, 0.025, 0.5, 0.1, 0.9, 0.95, 0.975, 0.99))
}
apply(Lqs, 2, mean)
qnorm(c(0.01, 0.025, 0.5, 0.1, 0.9, 0.95, 0.975, 0.99))
source("basic_functions.R")
set.seed(42)
MC_runs <- 1000
Ls <- matrix(nrow=MC_runs, ncol=32)
for(i in 1:MC_runs){
cat('Randomizing...\t', i, '\n')
X <- rnorm(50)
Ls[i, ] <- sapply(1:32, L, X)
}
Lqs <- matrix(nrow=MC_runs, ncol=6)
for(i in 1:MC_runs){
cat('Crunching quantiles...\t', i, '\n')
Lqs[i,] <- quantile(L[i,], c(0.01, 0.025, 0.5, 0.1, 0.9, 0.95, 0.975, 0.99))
}
apply(Lqs, 2, mean)
qnorm(c(0.01, 0.025, 0.5, 0.1, 0.9, 0.95, 0.975, 0.99))
source("basic_functions.R")
set.seed(42)
MC_runs <- 1000
Ls <- matrix(nrow=MC_runs, ncol=32)
for(i in 1:MC_runs){
cat('Randomizing...\t', i, '\n')
X <- rnorm(50)
Ls[i, ] <- sapply(1:32, L, X)
}
Lqs <- matrix(nrow=MC_runs, ncol=6)
for(i in 1:MC_runs){
cat('Crunching quantiles...\t', i, '\n')
Lqs[i,] <- quantile(Ls[i,], c(0.01, 0.025, 0.5, 0.1, 0.9, 0.95, 0.975, 0.99))
}
apply(Lqs, 2, mean)
qnorm(c(0.01, 0.025, 0.5, 0.1, 0.9, 0.95, 0.975, 0.99))
source("basic_functions.R")
set.seed(42)
MC_runs <- 1000
Ls <- matrix(nrow=MC_runs, ncol=32)
for(i in 1:MC_runs){
cat('Randomizing...\t', i, '\n')
X <- rnorm(50)
Ls[i, ] <- sapply(1:32, L, X)
}
Lqs <- matrix(nrow=MC_runs, ncol=8)
for(i in 1:MC_runs){
cat('Crunching quantiles...\t', i, '\n')
Lqs[i,] <- quantile(Ls[i,], c(0.01, 0.025, 0.5, 0.1, 0.9, 0.95, 0.975, 0.99))
}
apply(Lqs, 2, mean)
qnorm(c(0.01, 0.025, 0.5, 0.1, 0.9, 0.95, 0.975, 0.99))
source("basic_functions.R")
set.seed(42)
MC_runs <- 1000
k <- 16
Ls <- matrix(nrow=MC_runs, ncol=k)
for(i in 1:MC_runs){
cat('Randomizing...\t', i, '\n')
X <- rnorm(50)
Ls[i, ] <- sapply(1:k, L, X)
}
Lqs <- matrix(nrow=MC_runs, ncol=8)
for(i in 1:MC_runs){
cat('Crunching quantiles...\t', i, '\n')
Lqs[i,] <- quantile(Ls[i,], c(0.01, 0.025, 0.5, 0.1, 0.9, 0.95, 0.975, 0.99))
}
apply(Lqs, 2, mean)
qnorm(c(0.01, 0.025, 0.5, 0.1, 0.9, 0.95, 0.975, 0.99))
qnorm(c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99))
source("basic_functions.R")
set.seed(42)
MC_runs <- 1000
k <- 16
Ls <- matrix(nrow=MC_runs, ncol=k)
for(i in 1:MC_runs){
cat('Randomizing...\t', i, '\n')
X <- rnorm(50)
Ls[i, ] <- sapply(1:k, L, X)
}
Lqs <- matrix(nrow=MC_runs, ncol=8)
for(i in 1:MC_runs){
cat('Crunching quantiles...\t', i, '\n')
Lqs[i,] <- quantile(Ls[i,], c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99))
}
apply(Lqs, 2, mean)
qnorm(c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99))
source("basic_functions.R")
set.seed(42)
MC_runs <- 10000
k <- 32
Ls <- matrix(nrow=MC_runs, ncol=k)
for(i in 1:MC_runs){
cat('Randomizing...\t', i, '\n')
X <- rnorm(50)
Ls[i, ] <- sapply(1:k, L, X)
}
Lqs <- matrix(nrow=MC_runs, ncol=8)
for(i in 1:MC_runs){
cat('Crunching quantiles...\t', i, '\n')
Lqs[i,] <- quantile(Ls[i,], c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99))
}
apply(Lqs, 2, mean)
qnorm(c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99))
data.frame(apply(Lqs, 2, mean), row.names = c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99))
source("basic_functions.R")
set.seed(42)
MC_runs <- 10000
k <- 32
Ls <- matrix(nrow=MC_runs, ncol=k)
for(i in 1:MC_runs){
cat('Randomizing...\t', i, '\n')
X <- rnorm(50)
Ls[i, ] <- sapply(1:k, L, X)
}
Lqs <- matrix(nrow=MC_runs, ncol=8)
for(i in 1:MC_runs){
cat('Crunching quantiles...\t', i, '\n')
Lqs[i,] <- quantile(Ls[i,], c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99))
}
write.csv(data.frame('L quantiles' = apply(Lqs, 2, mean),
'Norm quantiles' = qnorm(c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99))
row.names = c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99)),
"quantiles_L1_L32.csv")
?qchisq
source("basic_functions.R")
set.seed(42)
MC_runs <- 10000
k <- 32
Ls <- matrix(nrow=MC_runs, ncol=k)
for(i in 1:MC_runs){
cat('Randomizing...\t', i, '\n')
X <- rnorm(50)
Ls[i, ] <- sapply(1:k, L, X)
}
Lqs <- matrix(nrow=MC_runs, ncol=8)
Lq2s <- matrix(nrow=MC_runs, ncol=8)
for(i in 1:MC_runs){
cat('Crunching quantiles...\t', i, '\n')
Lqs[i,] <- quantile(Ls[i,], c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99))
Lq2s[i,] <- quantile(Ls[i,]^2, c(0.9, 0.95, 0.975, 0.99))
}
write.csv(data.frame('L quantiles' = apply(Lqs, 2, mean),
'Norm quantiles' = qnorm(c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99))
row.names = c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99)),
"L_quantiles.csv")
write.csv(data.frame('L quantiles' = apply(Lq2s, 2, mean),
'Chisq quantiles' = qchisq(c(0.9, 0.95, 0.975, 0.99), df=1)
row.names = c(0.9, 0.95, 0.975, 0.99)),
"L2_quantiles.csv")
write.csv(data.frame('L quantiles' = apply(Lqs, 2, mean),
'Norm quantiles' = qnorm(c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99)),
row.names = c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99)),
"L_quantiles.csv")
write.csv(data.frame('L quantiles' = apply(Lq2s, 2, mean),
'Chisq quantiles' = qchisq(c(0.9, 0.95, 0.975, 0.99), df=1),
row.names = c(0.9, 0.95, 0.975, 0.99)),
"L2_quantiles.csv")
source("basic_functions.R")
set.seed(42)
MC_runs <- 10000
k <- 32
Ls <- matrix(nrow=MC_runs, ncol=k)
for(i in 1:MC_runs){
cat('Randomizing...\t', i, '\n')
X <- rnorm(50)
Ls[i, ] <- sapply(1:k, L, X)
}
Lqs <- matrix(nrow=MC_runs, ncol=8)
Lq2s <- matrix(nrow=MC_runs, ncol=4)
for(i in 1:MC_runs){
cat('Crunching quantiles...\t', i, '\n')
Lqs[i,] <- quantile(Ls[i,], c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99))
Lq2s[i,] <- quantile(Ls[i,]^2, c(0.9, 0.95, 0.975, 0.99))
}
write.csv(data.frame('L quantiles' = apply(Lqs, 2, mean),
'Norm quantiles' = qnorm(c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99)),
row.names = c(0.01, 0.025, 0.05, 0.1, 0.9, 0.95, 0.975, 0.99)),
"L_quantiles.csv")
write.csv(data.frame('L quantiles' = apply(Lq2s, 2, mean),
'Chisq quantiles' = qchisq(c(0.9, 0.95, 0.975, 0.99), df=1),
row.names = c(0.9, 0.95, 0.975, 0.99)),
"L2_quantiles.csv")
