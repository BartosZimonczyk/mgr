setwd("~/Repos/mgr")
source("src/Q_test.R")
library(tidyverse)
install.packages("libcurl4-openssl-dev")
install.packages("tidyverse")
source("src/Q_test.R")
library(tidyverse)
options(bitmapType='cairo')
set.seed(42)
n <- 50
N <- 100
r <- 5
c_t <- 2.2
quants <- c(0.948, 0.949, 0.95, 0.951, 0.952)
cat("Sanity check of hyperparameters: \n")
cat(paste("n:\t", n, "\n"))
cat(paste("N:\t", N, "\n"))
cat(paste("r:\t", r, "\n"))
cat(paste("c:\t", c_t, "\n"))
cat("\n")
# by columns we have test with rules respectively
# A, T.A, S, T.M, M
Q_matrix <- matrix(nrow=N, ncol=5)
K_matrix <- matrix(nrow=N, ncol=5)
for(i in 1:N){
# cat(paste("Computing...\t Step", i, "\n"))
X <- rnorm(n, 0, 1)
Q_result_A <- Q_test(X, r, rule = "A")
Q_result_T.A <- Q_test(X, r, rule = "T.A", c_t)
Q_result_S <- Q_test(X, r, rule = "S")
Q_result_T.M <- Q_test(X, r, rule = "T.M", c_t)
Q_result_M <- Q_test(X, r, rule = "M")
Q_matrix[i,] <- c(
Q_result_A$Q.test,
Q_result_T.A$Q.test,
Q_result_S$Q.test,
Q_result_T.M$Q.test,
Q_result_M$Q.test
)
K_matrix[i,] <- c(
Q_result_A$k,
Q_result_T.A$k,
Q_result_S$k,
Q_result_T.M$k,
Q_result_M$k
)
}
# matrix with given quantiles for all rules
# rules in rows, quantiles in columns
final_matrix <- matrix(nrow=5, ncol=length(quants))
for(i in 1:5){
final_matrix[i,] <- quantile(Q_matrix[,i], probs=quants, names=F)
}
df_output <- data.frame(final_matrix, row.names=c("A", "T.A", "S", "T.M", "M"))
colnames(df_output) <- quants
hist(
K_matrix[,i],
main=paste("Value of rule", rule_names[i]),
breaks=1:(2^r),
xlim=c(1,2^r),
freq=FALSE
)
rule_names <- c("A", "T.A", "S", "T.M", "M")
hist(
K_matrix[,i],
main=paste("Value of rule", rule_names[i]),
breaks=1:(2^r),
xlim=c(1,2^r),
freq=FALSE
)
hist(
K_matrix[,i],
main=paste("Value of rule", rule_names[i]),
breaks=1:(2^r),
xlim=c(1,2^r),
freq=FALSE,
names=1:(2^r)
)
hist(
K_matrix[,i],
main=paste("Value of rule", rule_names[i]),
breaks=1:(2^r),
xlim=c(1,2^r),
freq=FALSE,
xaxt='n'
)
axis(side=1, at=1:(2^r), labels=1:(2^r))
hist(
K_matrix[,i],
main=paste("Value of rule", rule_names[i]),
breaks=1:(2^r),
xlim=c(1,2^r)-0.5,
freq=FALSE,
xaxt='n'
)
axis(side=1, at=1:(2^r)-0.5, labels=1:(2^r))
