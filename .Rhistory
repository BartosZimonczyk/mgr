install.packages("rstudioapi")
library("rstudioapi")
getSourceEditorContext()$path
?path
?split
linstall.
install.packages("stringr")
?strsplit
strsplit(path, "/")
path <- getSourceEditorContext()$path
strsplit(path, "/")
setwd("~/Repos/mgr/")
source("src/Q_test.R")
set.seed(42)
n <- 50
N <- 100
r <- 5
c_t <- 2
quants <- c(0.948, 0.949, 0.95, 0.951, 0.952)
cat("Sanity check of hyperparameters: \n")
cat(paste("n:\t", n, "\n"))
cat(paste("N:\t", N, "\n"))
cat(paste("r:\t", r, "\n"))
cat(paste("c:\t", c_t, "\n"))
cat("\n")
# by columns we have test with rules respectively
# A, T.A, S, T.M, M
Q_matrix <- matrix(nrow=N, ncol=5)
for(i in 1:N){
cat(paste("Computing...\t Step", i, "\n"))
X <- rnorm(n)
Q_matrix[i,] <- c(
Q_test(X, r, rule = "A")$Q.test,
Q_test(X, r, rule = "T.A", c_t)$Q.test,
Q_test(X, r, rule = "S")$Q.test,
Q_test(X, r, rule = "T.M", c_t)$Q.test,
Q_test(X, r, rule = "M")$Q.test
)
}
# matrix with given quantiles for all rules
# rules in rows, quantiles in columns
final_matrix <- matrix(nrow=5, ncol=length(quants))
for(i in 1:5){
final_matrix[i,] <- quantile(Q_matrix[,i], probs=quants, names=F)
}
output <- data.frame(final_matrix, row.names=c("A", "T.A", "S", "T.M", "M"))
colnames(output) <- quants
output
set.seed(44)
# testing by hand
n <- 50
N <- 100
r <- 5
c_t <- 2
quants <- c(0.948, 0.949, 0.95, 0.951, 0.952)
cat("Sanity check of hyperparameters: \n")
cat(paste("n:\t", n, "\n"))
cat(paste("N:\t", N, "\n"))
cat(paste("r:\t", r, "\n"))
cat(paste("c:\t", c_t, "\n"))
cat("\n")
# by columns we have test with rules respectively
# A, T.A, S, T.M, M
Q_matrix <- matrix(nrow=N, ncol=5)
for(i in 1:N){
cat(paste("Computing...\t Step", i, "\n"))
X <- rnorm(n)
Q_matrix[i,] <- c(
Q_test(X, r, rule = "A")$Q.test,
Q_test(X, r, rule = "T.A", c_t)$Q.test,
Q_test(X, r, rule = "S")$Q.test,
Q_test(X, r, rule = "T.M", c_t)$Q.test,
Q_test(X, r, rule = "M")$Q.test
)
}
# matrix with given quantiles for all rules
# rules in rows, quantiles in columns
final_matrix <- matrix(nrow=5, ncol=length(quants))
for(i in 1:5){
final_matrix[i,] <- quantile(Q_matrix[,i], probs=quants, names=F)
}
output <- data.frame(final_matrix, row.names=c("A", "T.A", "S", "T.M", "M"))
colnames(output) <- quants
output
set.seed(42)
# testing by hand
n <- 50
N <- 100
r <- 5
c_t <- 2
quants <- c(0.948, 0.949, 0.95, 0.951, 0.952)
cat("Sanity check of hyperparameters: \n")
cat(paste("n:\t", n, "\n"))
cat(paste("N:\t", N, "\n"))
cat(paste("r:\t", r, "\n"))
cat(paste("c:\t", c_t, "\n"))
cat("\n")
# by columns we have test with rules respectively
# A, T.A, S, T.M, M
Q_matrix <- matrix(nrow=N, ncol=5)
for(i in 1:N){
cat(paste("Computing...\t Step", i, "\n"))
X <- runif(n, -1, 1)
Q_matrix[i,] <- c(
Q_test(X, r, rule = "A")$Q.test,
Q_test(X, r, rule = "T.A", c_t)$Q.test,
Q_test(X, r, rule = "S")$Q.test,
Q_test(X, r, rule = "T.M", c_t)$Q.test,
Q_test(X, r, rule = "M")$Q.test
)
}
# matrix with given quantiles for all rules
# rules in rows, quantiles in columns
final_matrix <- matrix(nrow=5, ncol=length(quants))
for(i in 1:5){
final_matrix[i,] <- quantile(Q_matrix[,i], probs=quants, names=F)
}
output <- data.frame(final_matrix, row.names=c("A", "T.A", "S", "T.M", "M"))
colnames(output) <- quants
output
set.seed(44)
# testing by hand
n <- 50
N <- 100
r <- 5
c_t <- 2
quants <- c(0.948, 0.949, 0.95, 0.951, 0.952)
cat("Sanity check of hyperparameters: \n")
cat(paste("n:\t", n, "\n"))
cat(paste("N:\t", N, "\n"))
cat(paste("r:\t", r, "\n"))
cat(paste("c:\t", c_t, "\n"))
cat("\n")
# by columns we have test with rules respectively
# A, T.A, S, T.M, M
Q_matrix <- matrix(nrow=N, ncol=5)
for(i in 1:N){
cat(paste("Computing...\t Step", i, "\n"))
X <- runif(n, -1, 1)
Q_matrix[i,] <- c(
Q_test(X, r, rule = "A")$Q.test,
Q_test(X, r, rule = "T.A", c_t)$Q.test,
Q_test(X, r, rule = "S")$Q.test,
Q_test(X, r, rule = "T.M", c_t)$Q.test,
Q_test(X, r, rule = "M")$Q.test
)
}
# matrix with given quantiles for all rules
# rules in rows, quantiles in columns
final_matrix <- matrix(nrow=5, ncol=length(quants))
for(i in 1:5){
final_matrix[i,] <- quantile(Q_matrix[,i], probs=quants, names=F)
}
output <- data.frame(final_matrix, row.names=c("A", "T.A", "S", "T.M", "M"))
colnames(output) <- quants
output
set.seed(298754)
# testing by hand
n <- 50
N <- 100
r <- 5
c_t <- 2
quants <- c(0.948, 0.949, 0.95, 0.951, 0.952)
cat("Sanity check of hyperparameters: \n")
cat(paste("n:\t", n, "\n"))
cat(paste("N:\t", N, "\n"))
cat(paste("r:\t", r, "\n"))
cat(paste("c:\t", c_t, "\n"))
cat("\n")
# by columns we have test with rules respectively
# A, T.A, S, T.M, M
Q_matrix <- matrix(nrow=N, ncol=5)
for(i in 1:N){
cat(paste("Computing...\t Step", i, "\n"))
X <- runif(n, -1, 1)
Q_matrix[i,] <- c(
Q_test(X, r, rule = "A")$Q.test,
Q_test(X, r, rule = "T.A", c_t)$Q.test,
Q_test(X, r, rule = "S")$Q.test,
Q_test(X, r, rule = "T.M", c_t)$Q.test,
Q_test(X, r, rule = "M")$Q.test
)
}
# matrix with given quantiles for all rules
# rules in rows, quantiles in columns
final_matrix <- matrix(nrow=5, ncol=length(quants))
for(i in 1:5){
final_matrix[i,] <- quantile(Q_matrix[,i], probs=quants, names=F)
}
output <- data.frame(final_matrix, row.names=c("A", "T.A", "S", "T.M", "M"))
colnames(output) <- quants
output
set.seed(42)
# testing by hand
n <- 50
N <- 100
r <- 5
c_t <- 2
quants <- c(0.948, 0.949, 0.95, 0.951, 0.952)
cat("Sanity check of hyperparameters: \n")
cat(paste("n:\t", n, "\n"))
cat(paste("N:\t", N, "\n"))
cat(paste("r:\t", r, "\n"))
cat(paste("c:\t", c_t, "\n"))
cat("\n")
# by columns we have test with rules respectively
# A, T.A, S, T.M, M
Q_matrix <- matrix(nrow=N, ncol=5)
for(i in 1:N){
cat(paste("Computing...\t Step", i, "\n"))
X <- rnorm(n, 0, 1)
Q_matrix[i,] <- c(
Q_test(X, r, rule = "A")$Q.test,
Q_test(X, r, rule = "T.A", c_t)$Q.test,
Q_test(X, r, rule = "S")$Q.test,
Q_test(X, r, rule = "T.M", c_t)$Q.test,
Q_test(X, r, rule = "M")$Q.test
)
}
# matrix with given quantiles for all rules
# rules in rows, quantiles in columns
final_matrix <- matrix(nrow=5, ncol=length(quants))
for(i in 1:5){
final_matrix[i,] <- quantile(Q_matrix[,i], probs=quants, names=F)
}
output <- data.frame(final_matrix, row.names=c("A", "T.A", "S", "T.M", "M"))
colnames(output) <- quants
output
set.seed(50)
# testing by hand
n <- 50
N <- 100
r <- 5
c_t <- 2
quants <- c(0.948, 0.949, 0.95, 0.951, 0.952)
cat("Sanity check of hyperparameters: \n")
cat(paste("n:\t", n, "\n"))
cat(paste("N:\t", N, "\n"))
cat(paste("r:\t", r, "\n"))
cat(paste("c:\t", c_t, "\n"))
cat("\n")
# by columns we have test with rules respectively
# A, T.A, S, T.M, M
Q_matrix <- matrix(nrow=N, ncol=5)
for(i in 1:N){
cat(paste("Computing...\t Step", i, "\n"))
X <- rnorm(n, 0, 1)
Q_matrix[i,] <- c(
Q_test(X, r, rule = "A")$Q.test,
Q_test(X, r, rule = "T.A", c_t)$Q.test,
Q_test(X, r, rule = "S")$Q.test,
Q_test(X, r, rule = "T.M", c_t)$Q.test,
Q_test(X, r, rule = "M")$Q.test
)
}
# matrix with given quantiles for all rules
# rules in rows, quantiles in columns
final_matrix <- matrix(nrow=5, ncol=length(quants))
for(i in 1:5){
final_matrix[i,] <- quantile(Q_matrix[,i], probs=quants, names=F)
}
output <- data.frame(final_matrix, row.names=c("A", "T.A", "S", "T.M", "M"))
colnames(output) <- quants
output
